// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/yyh-gl/hobigon-golang-api-server/app"
	"github.com/yyh-gl/hobigon-golang-api-server/app/infra"
	"github.com/yyh-gl/hobigon-golang-api-server/app/infra/db"
	"github.com/yyh-gl/hobigon-golang-api-server/app/infra/igateway"
	"github.com/yyh-gl/hobigon-golang-api-server/app/infra/irepository"
	"github.com/yyh-gl/hobigon-golang-api-server/app/infra/iservice"
	"github.com/yyh-gl/hobigon-golang-api-server/app/interface/rest"
	"github.com/yyh-gl/hobigon-golang-api-server/app/usecase"
	"github.com/yyh-gl/hobigon-golang-api-server/cmd/api/di"
)

// Injectors from wire.go:

func initApp() *di.ContainerAPI {
	gormDB := db.NewDB()
	blog := irepository.NewBlog(gormDB)
	slackGateway := igateway.NewSlackGateway()
	usecaseBlog := usecase.NewBlog(blog, slackGateway)
	restBlog := rest.NewBlog(usecaseBlog)
	birthday := irepository.NewBirthday(gormDB)
	usecaseBirthday := usecase.NewBirthdayUseCase(birthday)
	restBirthday := rest.NewBirthday(usecaseBirthday)
	taskGateway := igateway.NewTaskGateway()
	notificationService := iservice.NewNotificationService(slackGateway)
	rankingService := iservice.NewRankingService()
	notification := usecase.NewNotification(taskGateway, slackGateway, birthday, notificationService, rankingService)
	restNotification := rest.NewNotification(notification)
	logger := app.NewAPILogger()
	containerAPI := &di.ContainerAPI{
		HandlerBlog:         restBlog,
		HandlerBirthday:     restBirthday,
		HandlerNotification: restNotification,
		DB:                  gormDB,
		Logger:              logger,
	}
	return containerAPI
}

// wire.go:

var appSet = wire.NewSet(app.APISet, infra.APISet, usecase.APISet, rest.WireSet)
