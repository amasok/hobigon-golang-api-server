// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/yyh-gl/hobigon-golang-api-server/app"
	"github.com/yyh-gl/hobigon-golang-api-server/cmd/api/di"
	"github.com/yyh-gl/hobigon-golang-api-server/handler/cli"
	"github.com/yyh-gl/hobigon-golang-api-server/infra"
	"github.com/yyh-gl/hobigon-golang-api-server/infra/db"
	"github.com/yyh-gl/hobigon-golang-api-server/infra/igateway"
	"github.com/yyh-gl/hobigon-golang-api-server/infra/irepository"
	"github.com/yyh-gl/hobigon-golang-api-server/infra/iservice"
	"github.com/yyh-gl/hobigon-golang-api-server/usecase"
)

// Injectors from wire.go:

func initApp() *di.ContainerCLI {
	taskGateway := igateway.NewTaskGateway()
	slackGateway := igateway.NewSlackGateway()
	gormDB := db.NewDB()
	birthdayRepository := irepository.NewBirthdayRepository(gormDB)
	notificationService := iservice.NewNotificationService(slackGateway)
	rankingService := iservice.NewRankingService()
	notificationUseCase := usecase.NewNotificationUseCase(taskGateway, slackGateway, birthdayRepository, notificationService, rankingService)
	notificationHandler := cli.NewNotificationHandler(notificationUseCase)
	logger := app.NewCLILogger()
	containerCLI := &di.ContainerCLI{
		HandlerNotification: notificationHandler,
		DB:                  gormDB,
		Logger:              logger,
	}
	return containerCLI
}

// wire.go:

// TODO: infra, usecaseもapiとcliで分ける
var appSet = wire.NewSet(app.CLISet, infra.WireSet, usecase.WireSet, cli.WireSet)
